#!/bin/sh
#
# 50_setup-acmecerts
#
#
#

#
# Config
#

ACME_FILE=${ACME_FILE-/acme/acme.json}
HOSTNAME=${HOSTNAME-$(hostname)}
DOCKER_ACME_SSL_DIR=${DOCKER_ACME_SSL_DIR-/etc/ssl/acme}
DOCKER_AST_SSL_DIR=${DOCKER_AST_SSL_DIR-/etc/ssl/asterisk}

#
# Helpers
#

inform() { printf "entrypoint[$$]: INFO:$(basename $0): $*.\n" ;}

_is_installed() { apk -e info $1 &>/dev/null ;} # true if pkg is installed

#
# Make sure that we have the required directory structure in place under
# DOCKER_PERSIST_DIR. It will be missing if we mount an empty volume there.
#

fix_persist_dirs() {
	mkdir -p ${DOCKER_PERSIST_DIR}${DOCKER_ACME_SSL_DIR} \
		${DOCKER_PERSIST_DIR}${DOCKER_AST_SSL_DIR}
}

setup_runit_acme_dump() {
	if (_is_installed jq && [ -f $ACME_FILE ]); then
		setup-runit.sh "-n acme $(which inotifyd) $(which dumpcerts.sh) $ACME_FILE:c"
	fi
}

configure_acme_tls_cert() {
	if (_is_installed jq && [ -f $ACME_FILE ]); then
		# run dumpcerts.sh on cnt creation (and every time the json file changes)
		local message="$(dumpcerts.sh $ACME_FILE $DOCKER_ACME_SSL_DIR 2>&1 | sed ':a;N;$!ba;s/\n/ - /g')"
		inform "$message"
		inform "Configuring acme-tls for host $HOSTNAME"
		ln -sf $DOCKER_ACME_SSL_DIR/certs/${HOSTNAME}.crt $DOCKER_AST_SSL_DIR/cert.pem
		ln -sf $DOCKER_ACME_SSL_DIR/private/${HOSTNAME}.key $DOCKER_AST_SSL_DIR/priv_key.pem
	fi
}

#
# Run
#

fix_presist_dirs
setup_runit_acme_dump
configure_acme_tls_cert
